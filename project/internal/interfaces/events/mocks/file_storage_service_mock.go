// Code generated by MockGen. DO NOT EDIT.
// Source: tickets/internal/interfaces/events (interfaces: FileStorageService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileStorageService is a mock of FileStorageService interface.
type MockFileStorageService struct {
	ctrl     *gomock.Controller
	recorder *MockFileStorageServiceMockRecorder
}

// MockFileStorageServiceMockRecorder is the mock recorder for MockFileStorageService.
type MockFileStorageServiceMockRecorder struct {
	mock *MockFileStorageService
}

// NewMockFileStorageService creates a new mock instance.
func NewMockFileStorageService(ctrl *gomock.Controller) *MockFileStorageService {
	mock := &MockFileStorageService{ctrl: ctrl}
	mock.recorder = &MockFileStorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileStorageService) EXPECT() *MockFileStorageServiceMockRecorder {
	return m.recorder
}

// Upload mocks base method.
func (m *MockFileStorageService) Upload(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockFileStorageServiceMockRecorder) Upload(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockFileStorageService)(nil).Upload), arg0, arg1, arg2)
}
