// Code generated by MockGen. DO NOT EDIT.
// Source: tickets/internal/interfaces/events (interfaces: DeadNationService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	clients "tickets/internal/infrastructure/clients"

	gomock "github.com/golang/mock/gomock"
)

// MockDeadNationService is a mock of DeadNationService interface.
type MockDeadNationService struct {
	ctrl     *gomock.Controller
	recorder *MockDeadNationServiceMockRecorder
}

// MockDeadNationServiceMockRecorder is the mock recorder for MockDeadNationService.
type MockDeadNationServiceMockRecorder struct {
	mock *MockDeadNationService
}

// NewMockDeadNationService creates a new mock instance.
func NewMockDeadNationService(ctrl *gomock.Controller) *MockDeadNationService {
	mock := &MockDeadNationService{ctrl: ctrl}
	mock.recorder = &MockDeadNationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeadNationService) EXPECT() *MockDeadNationServiceMockRecorder {
	return m.recorder
}

// BookTickets mocks base method.
func (m *MockDeadNationService) BookTickets(arg0 context.Context, arg1 clients.TicketBookingRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookTickets", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BookTickets indicates an expected call of BookTickets.
func (mr *MockDeadNationServiceMockRecorder) BookTickets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookTickets", reflect.TypeOf((*MockDeadNationService)(nil).BookTickets), arg0, arg1)
}
