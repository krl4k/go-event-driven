// Code generated by MockGen. DO NOT EDIT.
// Source: tickets/internal/app (interfaces: PaymentsService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPaymentsService is a mock of PaymentsService interface.
type MockPaymentsService struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentsServiceMockRecorder
}

// MockPaymentsServiceMockRecorder is the mock recorder for MockPaymentsService.
type MockPaymentsServiceMockRecorder struct {
	mock *MockPaymentsService
}

// NewMockPaymentsService creates a new mock instance.
func NewMockPaymentsService(ctrl *gomock.Controller) *MockPaymentsService {
	mock := &MockPaymentsService{ctrl: ctrl}
	mock.recorder = &MockPaymentsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentsService) EXPECT() *MockPaymentsServiceMockRecorder {
	return m.recorder
}

// Refund mocks base method.
func (m *MockPaymentsService) Refund(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refund", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Refund indicates an expected call of Refund.
func (mr *MockPaymentsServiceMockRecorder) Refund(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refund", reflect.TypeOf((*MockPaymentsService)(nil).Refund), arg0, arg1, arg2)
}
