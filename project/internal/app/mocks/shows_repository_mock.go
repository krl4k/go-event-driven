// Code generated by MockGen. DO NOT EDIT.
// Source: tickets/internal/app (interfaces: ShowsRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	entities "tickets/internal/entities"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockShowsRepository is a mock of ShowsRepository interface.
type MockShowsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockShowsRepositoryMockRecorder
}

// MockShowsRepositoryMockRecorder is the mock recorder for MockShowsRepository.
type MockShowsRepositoryMockRecorder struct {
	mock *MockShowsRepository
}

// NewMockShowsRepository creates a new mock instance.
func NewMockShowsRepository(ctrl *gomock.Controller) *MockShowsRepository {
	mock := &MockShowsRepository{ctrl: ctrl}
	mock.recorder = &MockShowsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShowsRepository) EXPECT() *MockShowsRepositoryMockRecorder {
	return m.recorder
}

// GetShow mocks base method.
func (m *MockShowsRepository) GetShow(arg0 context.Context, arg1 uuid.UUID) (*entities.Show, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShow", arg0, arg1)
	ret0, _ := ret[0].(*entities.Show)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShow indicates an expected call of GetShow.
func (mr *MockShowsRepositoryMockRecorder) GetShow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShow", reflect.TypeOf((*MockShowsRepository)(nil).GetShow), arg0, arg1)
}
