// Code generated by MockGen. DO NOT EDIT.
// Source: tickets/internal/app (interfaces: SpreadsheetsService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	entities "tickets/internal/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockSpreadsheetsService is a mock of SpreadsheetsService interface.
type MockSpreadsheetsService struct {
	ctrl     *gomock.Controller
	recorder *MockSpreadsheetsServiceMockRecorder
}

// MockSpreadsheetsServiceMockRecorder is the mock recorder for MockSpreadsheetsService.
type MockSpreadsheetsServiceMockRecorder struct {
	mock *MockSpreadsheetsService
}

// NewMockSpreadsheetsService creates a new mock instance.
func NewMockSpreadsheetsService(ctrl *gomock.Controller) *MockSpreadsheetsService {
	mock := &MockSpreadsheetsService{ctrl: ctrl}
	mock.recorder = &MockSpreadsheetsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSpreadsheetsService) EXPECT() *MockSpreadsheetsServiceMockRecorder {
	return m.recorder
}

// AppendRow mocks base method.
func (m *MockSpreadsheetsService) AppendRow(arg0 context.Context, arg1 entities.AppendToTrackerRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AppendRow", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendRow indicates an expected call of AppendRow.
func (mr *MockSpreadsheetsServiceMockRecorder) AppendRow(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendRow", reflect.TypeOf((*MockSpreadsheetsService)(nil).AppendRow), arg0, arg1)
}
